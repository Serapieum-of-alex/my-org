[project]
name = "my-org"
version = "0.1.0"
description = "github organization analyzer"
readme = {file = "README.md", content-type = "text/markdown"}
authors = [
    { name = "Mostafa Farrag", email = "moah.farag@gmail.com" }
]
license = {text = "GNU General Public License v3"}
keywords = ["github"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: GIS",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
]

requires-python = ">= 3.12, <4"

dependencies = [
    "PyGithub >=2.7.0",
    "python-dotenv>=1.0.0",
    "streamlit >=1.48.0,<2"
]

[project.optional-dependencies]
dev = [
    "nbval >=0.11.0",
    "pre-commit >=3.7.1",
    "pre-commit-hooks >=4.6.0",
    "pytest >=8.2.2",
    "pytest-cov >= 5.0.0",
    "coverage",
    "build>=1.0.0",
    "twine>=5.0.0",
]
docs = [
    "mkdocs >=1.5.3",
    "mkdocs-material >=9.5.3",
    "mkdocstrings >=0.24.0",
    "mkdocstrings-python >=1.7.5",
    "mike >=2.1.3",
    "mkdocs-jupyter >=0.25.1",
    "mkdocs-autorefs  >=1.2",
    "mkdocs-macros-plugin  >=1.3.7",
    "mkdocs-table-reader-plugin  >=3.1.0",
    "mkdocs-mermaid2-plugin  >=1.2.1",
    "jupyter-contrib-nbextensions  >=0.7.0",
    "notebook<7.0",
    "jupyter"
]

[project.urls]
homepage = "https://github.com/Serapieum-of-alex/pyramids"
repository = "https://github.com/Serapieum-of-alex/pyramids"
documentation = "https://pyramids-gis.readthedocs.io/"
Changelog = "https://github.com/Serapieum-of-alex/pyramids/HISTORY.rst"


[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]

[tool.setuptools.packages.find]
where = ["src"]
include = ["my_org", "my_org.*"]


[tool.flake8]
ignore = ["E203", "E266", "E501", "W503", "E722", "C901", "E741", "E731"]
max-line-length = 88
max-complexity = 18
select = "B,C,E,F,W,T4"

[tool.black]
profile = "flake8"
line-length = 88
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3


[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
markers = [
    "vfs: mark a test as a virtual file system (deselect with '-m \"not vfs\"')",
    "slow: mark test as slow (deselect with '-m \"not slow\"')",
    "fast: mark test as fast (deselect with '-m \"not fast\"')",
    "plot: test plotting function optional package (deselect with '-m \"not plot\"')"
]


[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64"]

[tool.pixi.pypi-dependencies]
my-org = { path = ".", editable = true }

[tool.pixi.tasks]
main = { cmd = "pytest -vvv --cov=src/my_org -sv -m 'not plot' --cov-report=xml", description = "Run the main test suite" }
plot = { cmd = "pytest -vvv --cov=src/my_org -sv -m 'plot' --cov-report=xml", description = "Run plot test suite" }
notebooks = { cmd = "pytest --nbval --nbval-lax --verbose examples/notebooks", description = "check notebooks" }
build-dist = { cmd = "python -m build", description = "Build sdist and wheel for PyPI" }
publish-pypi = { cmd = "twine upload --non-interactive --repository pypi dist/*", depends-on = ["build-dist"], description = "Build and upload package to PyPI" }

[tool.pixi.environments]
default = { features = ["dev"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
py312 = { features = ["py312", "dev"], solve-group = "py312" }



[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.dependencies]


